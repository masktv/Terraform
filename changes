resource "aws_autoscaling_group" "deployment_scaling_group" {
  name_prefix          = "deployment-asg-"
  max_size             = 5
  min_size             = 2
  desired_capacity     = 2
  vpc_zone_identifier  = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id, aws_subnet.public_subnet_3.id]
  target_group_arns    = [aws_lb_target_group.target_group.arn]

  health_check_type    = "ELB"
  health_check_grace_period = 60
  termination_policies = ["OldestInstance"]

  capacity_rebalance   = true

  launch_template {
    id      = aws_launch_template.deployment_template.id
    version = "$Latest"
  }

  lifecycle {
    create_before_destroy = true
  }

  instance_refresh {
    strategy = "Rolling"
    preferences {
      min_healthy_percentage = 90
      instance_warmup        = 300
    }
    triggers = ["launch_template"]
  }

  tag {
    key                 = "Name"
    value               = "web-server"
    propagate_at_launch = true
  }
}



      

# Security group for EFS allowing NFS
resource "aws_security_group" "efs_sg" {
  name   = "efs-sg"
  vpc_id = aws_vpc.custom_vpc.id

  ingress {
    from_port   = 2049
    to_port     = 2049
    protocol    = "tcp"
    security_groups = [aws_security_group.custom_sg.id] # allow app SG
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Mount targets
resource "aws_efs_mount_target" "mt_1" {
  file_system_id  = aws_efs_file_system.app_file.id
  subnet_id       = aws_subnet.private_subnet_1.id
  security_groups = [aws_security_group.efs_sg.id]
}

resource "aws_efs_mount_target" "mt_2" {
  file_system_id  = aws_efs_file_system.app_file.id
  subnet_id       = aws_subnet.private_subnet_2.id
  security_groups = [aws_security_group.efs_sg.id]
}

resource "aws_efs_mount_target" "mt_3" {
  file_system_id  = aws_efs_file_system.app_file.id
  subnet_id       = aws_subnet.private_subnet_3.id
  security_groups = [aws_security_group.efs_sg.id]
}


